{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","delete","get","todolistsAPI","title","id","put","todolistId","taskId","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","isInitialized","status","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a259acf.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '62d66d69-02d1-48f4-85bd-ecfe61bb9699'\r\n    }\r\n})\r\n\r\nexport type loginPramsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: boolean\r\n}\r\nexport type MeType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\nexport const authAPI = {\r\n    login(data: loginPramsType) {\r\n        return instance.post <{ email: string, password: string, rememberMe?: boolean, captcha?: boolean }, AxiosResponse<ResponseType<{ userId: number }>>>(\"auth/login\", data)\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeType>>('auth/me');\r\n    }\r\n\r\n\r\n}\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, loginPramsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: loginPramsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\nexport const loginOUT = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logOut()\r\n        .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isInitialized: false,\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    isInitialized: boolean,\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-INITIALIZED', isInitialized} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setInitializedAC(true))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetInitializedActionType = ReturnType<typeof setInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetInitializedActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if ( !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n\r\n    let dispatch = useDispatch();\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.email) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length <= 3) {\r\n                errors.password = \"Need to be more then 3 symbols\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            //alert(JSON.stringify(values))\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to='/'/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                            // name=\"email\"\r\n                            // onBlur={formik.handleBlur}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                            // name=\"password\"\r\n                            // onBlur={formik.handleBlur}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox\r\n                                              {...formik.getFieldProps(\"rememberMe\")}\r\n                                              checked={formik.values.rememberMe}\r\n                                              //чтобы перезачиститьо после отправки, т к автоматическая зачистка на чекбоксах не работает\r\n                                              // name=\"rememberMe\"\r\n                                              // onChange={formik.handleChange}\r\n                                              //checked={formik.values.rememberMe}\r\n                                          />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {loginOUT} from \"../features/Login/auth-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={()=>{dispatch(loginOUT())}}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path='/Login' element={<Login/>}/>\r\n                    <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}